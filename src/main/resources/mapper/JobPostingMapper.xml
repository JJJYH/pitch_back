<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.server.pitch.hire.mapper.JobPostingMapper">
    <!-- JobReq resultMap -->
    <resultMap id="JobPostingMap" type="JobPosting">
        <id property="job_posting_no" column="job_posting_no"/>
        <result property="posting_status" column="posting_status"/>

        <!-- JobReq 매핑 -->
        <collection property="jobReq" javaType="JobReq">
            <id property="job_req_no" column="job_req_no"/>
            <result property="req_title" column="req_title"/>
            <result property="job_req_date" column="job_req_date"/>
            <result property="job_group" column="job_group"/>
            <result property="job_role" column="job_role"/>
            <result property="location" column="location"/>
            <result property="hire_num" column="hire_num"/>
            <result property="education" column="education"/>
            <result property="job_type" column="job_type"/>
            <result property="job_year" column="job_year"/>
            <result property="posting_type" column="posting_type"/>
            <result property="posting_start" column="posting_start"/>
            <result property="posting_end" column="posting_end"/>
            <result property="qualification" column="qualification"/>
            <result property="preferred" column="preferred"/>
            <result property="job_duties" column="job_duties"/>
            <result property="req_status" column="req_status"/>
        </collection>

        <collection property="users" javaType="Users">
            <id property="user_id" column="user_id"/>
            <result property="user_email" column="user_email"/>
            <result property="user_pw" column="user_pw"/>
            <result property="user_nm" column="user_nm"/>
            <result property="role" column="role"/>
            <result property="user_phone" column="user_phone"/>
            <result property="user_birth" column="user_birth"/>
        </collection>

        <collection property="department" javaType="Department">
            <id property="dept_no" column="dept_no"/>
            <result property="dept_name" column="dept_name"/>
            <result property="max_num" column="max_num"/>
        </collection>
    </resultMap>

    <resultMap id="cvDataViewResultMap" type="CV">
        <id property="cv_no" column="cv_no"/>
        <id property="user_id" column="user_id"/>
        <result property="job_posting_no" column="job_posting_no"/>
        <result property="gender" column="gender"/>
        <result property="address" column="address"/>
        <result property="user_nm" column="user_nm"/>
        <result property="user_phone" column="user_phone"/>
        <result property="user_email" column="user_email"/>
        <result property="user_birth" column="user_birth"/>
        <collection property="certifications" resultMap="certificationMap"/>
        <collection property="educations" resultMap="educationMap"/>
        <collection property="languages" resultMap="languageMap"/>
        <collection property="skills" resultMap="skillMap"/>
    </resultMap>

    <resultMap id="certificationMap" type="Certification">
        <id property="cv_no" column="cv_no"/>
        <id property="user_id" column="user_id"/>
        <id property="cert_no" column="cert_no"/>
        <result property="cert_name" column="cert_name"/>
        <result property="publisher" column="publisher"/>
        <result property="acquisition_date" column="acquisition_date"/>
    </resultMap>


    <resultMap id="educationMap" type="Education">
        <id property="cv_no" column="cv_no"/>
        <id property="user_id" column="user_id"/>
        <id property="edu_no" column="edu_no"/>
        <result property="edu_type" column="edu_type"/>
        <result property="enter_date" column="enter_date"/>
        <result property="graduate_date" column="graduate_date"/>
        <result property="graduate_type" column="graduate_type"/>
        <result property="major" column="major"/>
        <result property="score" column="score"/>
        <result property="total_score" column="total_score"/>
    </resultMap>

    <resultMap id="languageMap" type="Language">
        <id property="cv_no" column="cv_no"/>
        <id property="user_id" column="user_id"/>
        <id property="language_no" column="language_no"/>
        <result property="exam_type" column="exam_type"/>
        <result property="language_name" column="language_name"/>
        <result property="language_score" column="language_score"/>
    </resultMap>

    <resultMap id="skillMap" type="Skill">
        <id property="cv_no" column="cv_no"/>
        <id property="user_id" column="user_id"/>
        <id property="skill_no" column="skill_no"/>
        <result property="skill_name" column="skill_name"/>
        <result property="skill_domain" column="skill_domain"/>
    </resultMap>


    <insert id="insertJobPosting">
        <selectKey keyProperty="job_posting_no" order="BEFORE" resultType="int">
            SELECT nextval(job_posting_seq)
        </selectKey>
        insert into jobposting (job_posting_no, job_req_no, posting_status )
        values (#{job_posting_no}, #{jobReq.job_req_no},  #{posting_status})

    </insert>

    <!-- 공고를 등록할 때 jobreq의 req_status를 '공고중'으로 업데이트 -->
    <update id="updateJobReqStatus">
        UPDATE jobreq
        SET req_status = '공고중'
        WHERE job_req_no = #{job_req_no}
    </update>

    <select id="getAllJobPostingList" resultMap="JobPostingMap">
        SELECT jp.*, jr.*
        FROM jobposting jp
                 JOIN jobreq jr ON jp.job_req_no = jr.job_req_no
    </select>


    <select id="getAllJobPostingListById" resultMap="JobPostingMap">
        SELECT jp.*, jr.*
        FROM jobposting jp
                 JOIN jobreq jr ON jp.job_req_no = jr.job_req_no
        <where>
            <if test="user_id != 'admin'">
                AND jr.user_id = #{user_id}
            </if>
        </where>
    </select>



    <select id="selectJobPostingList" resultMap="JobPostingMap" parameterType="java.util.LinkedHashMap">
        SELECT jp.*, jr.*, COUNT(l.job_posting_no) as liked_count
        FROM jobposting jp
        JOIN jobreq jr ON jp.job_req_no = jr.job_req_no
        LEFT JOIN liked l ON jp.job_posting_no = l.job_posting_no
        WHERE 1=1
        <if test="jobType != 'defaultValue'">
            AND jr.job_type = #{jobType}
        </if>
        <if test="jobGroup != 'defaultValue'">
            AND jr.job_group = #{jobGroup}
        </if>
        <if test="location != 'defaultValue'">
            AND jr.location = #{location}
        </if>
        <if test="postingType != 'defaultValue'">
            AND jr.posting_type = #{postingType}
        </if>
        <if test="searchKey != null">
            AND (jr.job_group LIKE CONCAT('%', #{searchKey}, '%')
            OR jr.job_role LIKE CONCAT('%', #{searchKey}, '%'))
        </if>
        GROUP BY jp.job_posting_no, jr.job_req_no
        <choose>
            <when test="orderType == 'latest'">
                ORDER BY jr.posting_start DESC, jp.job_posting_no DESC
            </when>
            <when test="orderType == 'deadline'">
                ORDER BY jr.posting_end ASC, jp.job_posting_no ASC
            </when>
            <when test="orderType == 'mostLiked'">
                ORDER BY liked_count DESC, jp.job_posting_no ASC
            </when>
            <otherwise>
                ORDER BY jr.posting_start DESC, jp.job_posting_no DESC
            </otherwise>
        </choose>
    </select>


    <!-- 관심공고 -->

    <insert id="insertLiked" parameterType="Liked">
        INSERT INTO liked (job_posting_no, user_id)
        VALUES (#{job_posting_no}, #{user_id})
    </insert>

    <delete id="deleteLiked">
        DELETE FROM liked WHERE job_posting_no = #{job_posting_no} AND user_id = #{user_id}
    </delete>

    <select id="selectLikedByUserId" parameterType="string" resultType="Liked">
        SELECT * FROM liked WHERE user_id = #{user_id}
    </select>


    <!-- 추천공고 -->


    <select id="selectRecommendList" resultMap="JobPostingMap">
        <![CDATA[
        WITH RankingCTE AS (
            SELECT
                jp.job_posting_no,
                jr.job_req_no,
                jr.hire_num,
                COUNT(DISTINCT a.user_id) / jr.hire_num AS applicant_ratio,
                PERCENT_RANK() OVER (ORDER BY COUNT(DISTINCT a.user_id) / jr.hire_num) AS rank_applicant_ratio,
                    CASE WHEN jr.posting_end = '9999-01-01' THEN 20
                         ELSE DATEDIFF(jr.posting_end, CURRENT_DATE())
                        END AS days_until_deadline,
                PERCENT_RANK() OVER (ORDER BY CASE WHEN jr.posting_end = '9999-01-01' THEN 20
                                   ELSE DATEDIFF(jr.posting_end, CURRENT_DATE())
                              END) AS rank_days_until_deadline,
                    COUNT(DISTINCT l.user_id) AS num_of_likes,
                PERCENT_RANK() OVER (ORDER BY COUNT(DISTINCT l.user_id)) AS rank_num_of_likes
            FROM jobposting jp
                     JOIN jobreq jr ON jp.job_req_no = jr.job_req_no
                     LEFT JOIN apply a ON jp.job_posting_no = a.job_posting_no
                     LEFT JOIN liked l ON jp.job_posting_no = l.job_posting_no
            WHERE jr.posting_end > CURRENT_DATE()
            GROUP BY jp.job_posting_no, jr.job_req_no, jr.hire_num, jr.posting_end
        ), TotalScoreCTE1 AS (
            SELECT
                r.*,
                CASE
                    WHEN rank_applicant_ratio <= 0.2 THEN 10
                    WHEN rank_applicant_ratio <= 0.5 THEN 6
                    ELSE 2
                    END AS applicant_score,
                CASE
                    WHEN rank_days_until_deadline <= 0.2 THEN 10
                    WHEN rank_days_until_deadline <= 0.5 THEN 6
                    ELSE 2
                    END AS deadline_score,
                CASE
                    WHEN rank_num_of_likes <= 0.2 THEN 10
                    WHEN rank_num_of_likes <= 0.5 THEN 6
                    ELSE 2
                    END AS likes_score
            FROM RankingCTE r
        ), UserAppliedJobs AS (
            SELECT DISTINCT
                jr.job_group,
                jr.job_role,
                a.job_posting_no
            FROM
                apply a
                    JOIN
                jobposting jp ON a.job_posting_no = jp.job_posting_no
                    JOIN
                jobreq jr ON jp.job_req_no = jr.job_req_no
            WHERE
                a.user_id = #{userId}
        ), UserLikedJobs AS (
            SELECT DISTINCT
                jr.job_group,
                jr.job_role
            FROM
                liked l
                    JOIN
                jobposting jp ON l.job_posting_no = jp.job_posting_no
                    JOIN
                jobreq jr ON jp.job_req_no = jr.job_req_no
            WHERE
                l.user_id = #{userId}
        ), TotalScoreCTE2 AS (
            SELECT
                jp.job_posting_no,
                jr.job_req_no,
                jr.hire_num,
                COUNT(DISTINCT a.user_id) / jr.hire_num AS applicant_ratio,
                CASE
                    WHEN jr.posting_end = '9999-01-01' THEN 20
                    ELSE DATEDIFF(jr.posting_end, CURRENT_DATE())
                    END AS days_until_deadline,
                COUNT(DISTINCT l.user_id) AS num_of_likes,
                CASE
                    WHEN jr.job_group IN (SELECT job_group FROM UserAppliedJobs) THEN 10
                    ELSE 0
                    END AS job_group_score_applied,
                CASE
                    WHEN jr.job_role IN (SELECT job_role FROM UserAppliedJobs) THEN 20
                    ELSE 0
                    END AS job_role_score_applied,
                CASE
                    WHEN jr.job_group IN (SELECT job_group FROM UserLikedJobs) THEN 10
                    ELSE 0
                    END AS job_group_score_liked,
                CASE
                    WHEN jr.job_role IN (SELECT job_role FROM UserLikedJobs) THEN 20
                    ELSE 0
                    END AS job_role_score_liked
            FROM
                jobposting jp
                    JOIN
                jobreq jr ON jp.job_req_no = jr.job_req_no
                    LEFT JOIN
                apply a ON jp.job_posting_no = a.job_posting_no
                    LEFT JOIN
                liked l ON jp.job_posting_no = l.job_posting_no
            WHERE
                jr.posting_end > CURRENT_DATE()
            GROUP BY
                jp.job_posting_no, jr.job_req_no, jr.hire_num, jr.posting_end, jr.job_group, jr.job_role
        )
        SELECT
            t1.job_posting_no,
            t1.job_req_no,
            t1.hire_num,
            t1.applicant_ratio,
            t1.days_until_deadline,
            t1.num_of_likes,
            (0.3 * (t1.applicant_score + t1.deadline_score + t1.likes_score)) +
            (0.7 * (t2.job_group_score_applied + t2.job_role_score_applied + t2.job_group_score_liked + t2.job_role_score_liked)) AS total_score,
            jr.*
        FROM TotalScoreCTE1 t1
                 JOIN TotalScoreCTE2 t2 ON t1.job_posting_no = t2.job_posting_no
                 JOIN jobreq jr ON t1.job_req_no = jr.job_req_no
        WHERE t1.job_posting_no NOT IN (SELECT job_posting_no FROM UserAppliedJobs)
        ORDER BY total_score DESC
            LIMIT 9;
        ]]>
    </select>

    <!-- 통계 -->
    <select id="selectApplyGender" resultMap="cvDataViewResultMap">
        select
            cv.cv_no,
            cv.user_id,
            cv.gender
        from
            cv
                join apply on apply.cv_no = cv.cv_no
        where
            apply.job_posting_no = #{jobPostingNo}
    </select>

    <select id="selectApplyAge" resultMap="cvDataViewResultMap">
        select
            cv.cv_no,
            cv.user_id,
            u.user_birth
        from cv
        join apply a on a.cv_no = cv.cv_no
        join users u on u.user_id = cv.user_id
        where a.job_posting_no = #{jobPostingNo}
    </select>

    <select id="selectApplyCert" resultMap="cvDataViewResultMap">
        select
            c.cert_no,
            cv.cv_no,
            cv.user_id,
            c.cert_name
        from cv
                 join certification c on c.cv_no = cv.cv_no
        where cv.job_posting_no = #{jobPostingNo} and cv.user_id = c.user_id
    </select>

</mapper>
